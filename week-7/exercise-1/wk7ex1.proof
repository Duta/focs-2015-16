(*==============================*)
(* Example 5: rev (rev xs) = xs *)
(*==============================*)
Signatures:
    append : _a list -> _a list -> _a list ;
    rev    : _a list -> _a list ;

Definitions:
    [append nil] : forall xs : _a list . append [] xs = xs : _a list ;
    [append xs]  : forall xs : _a list . forall x : _a . forall ys : _a list . append (x::xs) ys = x :: append xs ys : _a list ;
    [rev nil]    : rev [] = [] : _a list ;
    [rev xs]     : forall xs : _a list . forall x : _a . rev (x :: xs) = append (rev xs) (x :: []) : _a list ;

(****************************************************************************************************************************)
(* rev-lemma : rev (append xs [x]) = x :: (rev xs)                                                                          *)
(* ------------------------------------------                                                                               *)
(* Induction on list:                                                                                                       *)
(* Base:                                                                                                                    *)
(*     rev (append [] [x])                                                                                                  *)
(*     = rev [x]               -- by definition of append on nil and [x]                                                    *)
(*     = append (rev []) [x]   -- by definition of rev on (x::[])                                                           *)
(*     = append [] [x]         -- by definition of rev on nil                                                               *)
(*     = [x]                   -- by definition of append on nil and [x]                                                    *)
(*     = x::(rev [])           -- by definition of rev nil                                                                  *)
(* Step:                                                                                                                    *)
(*     rev (append (hd::tl) [x]) = x::(rev (hd::tl))                                                                        *)
(*     = rev (hd::(append tl [x]))           -- by definition of append on (hd::tl) and [x]                                 *)
(*     = append (rev (append tl [x])) [hd]   -- by definition of rev on (hd::(append tl [x]))                               *)
(*     = append (x::(rev tl)) [hd]           -- by Inductive Hypothesis on tl and [x] ; rev (append tl [x]) = x :: (rev tl) *)
(*     = x :: (append (rev tl) [hd])         -- by definition of append on (append (x::(rev tl))) and [hd]                  *)
(*     = x :: (rev (hd::tl))                 -- by definition of rev on (hd::tl) ; (rev (hd::tl) = (append (rev tl) [hd]))  *)
(****************************************************************************************************************************)
Theorem [lemma] :
    Statement: forall xs : _a list . forall x : _a . rev (append xs (x::[])) = x :: (rev xs) : _a list
    Proof:
        by induction on list :

        case [] :
            assume x : _a .
            we know [step 1] : append [] (x :: []) = (x :: [])         : _a list because [append nil] with (x::[]).
            we know [step 2] : rev (x::[]) = append (rev []) (x :: []) : _a list because (* TODO *) [rev xs] with ([];x) (* END TODO *).
            equality on ([step 1];[step 2];[rev nil])

        case (hd::tl) : [IH] : forall x : _a . rev (append tl (x::[])) = x :: (rev tl) : _a list .
            assume x : _a .
            we know [step 1] : append (hd::tl) (x::[]) = hd :: (append tl (x::[])) : _a list
            because [append xs] with (tl;hd;(x::[])).
            we know [step 2] : rev (hd :: (append tl (x::[]))) = append (rev (append tl (x::[]))) (hd :: [])  : _a list
            because (* TODO *) [rev xs] with (append tl (x::[]);hd) (* END TODO *).
            we know [step 3] : append (x :: (rev tl)) (hd :: []) = x :: append (rev tl) (hd :: []) : _a list
            because (* TODO *) [append xs] with ((rev tl);x;(hd :: [])) (* END TODO *).
            we know [step 4] : rev (hd::tl) = append (rev tl) (hd :: []) : _a list
            because (* TODO *) [rev xs] with (tl;hd) (* END TODO *).
            we know [step 5] : rev (append tl (x::[])) = x :: (rev tl) : _a list
            because (* TODO *) [IH] with (x) (* END TODO *).
            equality on ([step 1];[step 2];[step 3];[step 4];[step 5])
    QED.

(***************************************************************************************************)
(* involution of rev : rev (rev xs) = xs                                                           *)
(* -------------------------------------                                                           *)
(* Induction on list:                                                                              *)
(* Base:                                                                                           *)
(*     rev (rev []) = []  --by equality                                                            *)
(* Step:                                                                                           *)
(*     rev (rev (hd :: tl))           --step 1 : by definition of rev on (hd::tl)                  *)
(*     = rev (append (rev tl) [hd])   --step 2 : by rev-lemma; rev (append xs [x]) = x :: (rev xs) *)
(*     = hd :: (rev (rev tl))         --step 3 : by Inductive Hypothesis                           *)
(*     = hd :: tl                     --QED.                                                       *)
(***************************************************************************************************)
Theorem [example 5] :
Statement: forall xs : _a list . rev (rev xs) = xs : _a list
Proof:
  by induction on list :
    case [] : equality on ([rev nil])

    case (hd :: tl) : [IH] : rev (rev tl) = tl : _a list .
      we know [1] : rev (hd :: tl) = append (rev tl) (hd::[])             : _a list
                    because [rev xs] with (tl;hd).
      we know [2] : rev (append (rev tl) (hd::[])) = hd :: (rev (rev tl)) : _a list
                    because [lemma] with (rev tl;hd) .
      equality on ([1];[2];[IH])
QED.
