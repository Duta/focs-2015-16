(* author: Yu-Yang Lin *)
(* date: 16/11/2015 *)
(* This file contains a proof for: head xs = last (rev xs)*)
Signatures:
    undefined : _a ;
    app  : _a list -> _a list -> _a list ;
    rev  : _a list -> _a list ;
    head : _a list -> _a ;
    last : _a list -> _a ;

Definitions:
    (*definitions of list functions*)
    [app nil] : forall xs : _a list . app [] xs = xs : _a list ;
    [app xs]  : forall xs : _a list . forall x : _a . forall ys : _a list . app (x::xs) ys = x :: app xs ys : _a list ;

    [rev nil] : rev [] = [] : _a list ;
    [rev xs]  : forall xs : _a list . forall x : _a . rev (x :: xs) = app (rev xs) (x :: []) : _a list ;

    [last nil] : last [] = undefined : _a ;
    [last x]   : forall x : _a . last (x::[]) = x : _a ;
    [last xs]  : forall xs : _a list . forall x : _a . last (x::xs) = last xs : _a ;

    [head nil] : head [] = undefined : _a ;
    [head xs]  : forall xs : _a list . forall x : _a . head (x::xs) = x : _a ;

Theorem [lemma]:
    Statement: forall x : _a . forall xs : _a list . last (app xs (x::[])) = last (x::[]) : _a
    Proof:
        assume x : _a .

        by induction on list:
        case []:
            we know [def 1] : app [] (x::[]) = (x::[]) : _a list
            because [app nil] with (x::[]).

            equality on ([def 1])
        case (y::ys): [IH] : last (app ys (x::[])) = last (x::[]) : _a .
            we know [def 1] : app (y::ys) (x::[]) = y::(app ys (x::[])) : _a list
            because [app xs] with (ys;y;x::[]).
            we know [def 2] : last (y::(app ys (x::[]))) = last (app ys (x::[])) : _a
            because [last xs] with (app ys (x::[]);y).

            we know [step 1] : last (app (y::ys) (x::[])) = last (y::(app ys (x::[]))) : _a
            because equality on ([def 1]).
            we know [step 2] : last (app (y::ys) (x::[])) = last (app ys (x::[])) : _a
            because equality on ([step 1];[def 2]).
            we know [step 3] : last (app (y::ys) (x::[])) = last (x::[]) : _a
            because equality on ([step 2];[IH]).

            by [step 3]
    QED.

Theorem [proof]:
    Statement: forall xs : _a list . head xs = last (rev xs) : _a
    Proof:
        by induction on list:
        case []:
            we know [step 1] : head [] = last [] : _a
            because equality on ([head nil];[last nil]).

            we know [step 2] : head [] = last (rev []) : _a
            because equality on ([step 1];[rev nil]).

            by [step 2]
        case (x::xs): [IH].
            we know [def 1] : last (x::[]) = x : _a
            because [last x] with (x).
            we know [def 2] : last (app (rev xs) (x::[])) = last (x::[]) : _a
            because [lemma] with (x;rev xs).
            we know [def 3] : rev (x::xs) = app (rev xs) (x::[]) : _a list
            because [rev xs] with (xs;x).

            we know [step 1] : head (x::xs) = x : _a
            because [head xs] with (xs;x).
            we know [step 2] : head (x::xs) = last (x::[]) : _a
            because equality on ([step 1];[def 1]).
            we know [step 3] : head (x::xs) = last (app (rev xs) (x::[])) : _a
            because equality on ([step 2];[def 2]).
            we know [step 4] : head (x::xs) = last (rev (x::xs)) : _a
            because equality on ([step 3];[def 3]).

            by [step 4]
    QED.
