(3pts) A graph is represented as a list of pairs defining its edges. Write a function that tests whether a list of pairs represents a loop. You may assume that each edge occurs at most once in the list of edges. You may assume the list is non-empty. The behaviour of the function in these illegal cases is undefined (it can do whatever).

loop : ('a * 'b) list -> bool

These are examples of loops:
loop [(1,2); (2,3); (3,1)] = true
loop [(1,2); (3,1); (2,3)] = true
because they both include the path 2->3->1->2 which is a loop.

These are examples of non-loops:
loop [(1,2); (1,3); (2,3)] = false because there is no way 3->1
loop [(1,2); (1,2); (3,1); (4,5)] = false because nodes 4, 5 are not reachable
loop [(0,0)] = true because there is (only) one path 0->0

These are the illegal and will not occur:
loop [(1,2); (1,2); (2,1)] is illegal because of repetition
loop [] is illegal because it is an empty list.
